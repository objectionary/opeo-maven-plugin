<?xml version="1.0" encoding="UTF-8"?>
<!--
The MIT License (MIT)

Copyright (c) 2016-2023 Objectionary.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <!--
      The version of 3.2.0 and similar requires rather high java
      version: 17 or higher. So we intentionally use the version 2.7.18
      here that requires java 11 since our plugin should be compatible with
      java 11.
    -->
    <version>2.7.18</version>
    <relativePath/>
  </parent>
  <groupId>org.eolang</groupId>
  <artifactId>opeo-spring-fat-it</artifactId>
  <version>@project.version@</version>
  <packaging>jar</packaging>
  <description>
    This integration test verifies all the phases of the `opeo-maven-plugin` along
    with the `jeo-maven-plugin` and `ineo-maven-plugin`. In this test, we use a
    Spring Framework-based application, build a fat jar application, and then apply
    all the transformations and optimizations to it.

    If you need to run only this test, use the following command:
    "mvn clean integration-test invoker:run -Dinvoker.test=spring-fat -DskipTests"
  </description>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <jeo.version>0.6.26</jeo.version>
    <ineo.version>0.3.2</ineo.version>
    <jeo.disassemble.output>${project.build.directory}/generated-sources/jeo-disassemble-xmir</jeo.disassemble.output>
    <opeo.decompile.output>${project.build.directory}/generated-sources/opeo-decompile-xmir</opeo.decompile.output>
    <opeo.modified>${project.build.directory}/generated-sources/opeo-decompile-modified-xmir</opeo.modified>
    <opeo.compile.input>${opeo.decompile.output}</opeo.compile.input>
    <opeo.compile.output>${project.build.directory}/generated-sources/opeo-compile-xmir</opeo.compile.output>
    <eo.phi.output>${project.build.directory}/generated-sources/phi-expressions</eo.phi.output>
    <skipITs/>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.8.1</version>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <!--
               @todo #229:90min Handle module-info.class files correctly.
                Currently we just exclude all `module-info.class` files from the downloaded dependencies.
                This means that we don't support Java 9+ modules.
                We should handle them correctly and ensure support Java 9+ modules in 'spring-fat' integration test.
                Otherwise the application of our solution will be limited to Java 8.
             -->
              <excludes>
                **/module-info.class
              </excludes>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>disassemble</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eolang</groupId>
            <artifactId>jeo-maven-plugin</artifactId>
            <version>${jeo.version}</version>
            <executions>
              <execution>
                <id>bytecode-to-eo</id>
                <goals>
                  <goal>disassemble</goal>
                </goals>
                <configuration>
                  <outputDir>${jeo.disassemble.output}</outputDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>decompile-nothing</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eolang</groupId>
            <artifactId>opeo-maven-plugin</artifactId>
            <version>@project.version@</version>
            <configuration>
              <disabled>true</disabled>
            </configuration>
            <executions>
              <execution>
                <id>opeo-decompile</id>
                <goals>
                  <goal>decompile</goal>
                </goals>
                <configuration>
                  <sourcesDir>${jeo.disassemble.output}</sourcesDir>
                  <outputDir>${opeo.decompile.output}</outputDir>
                  <modifiedDir>${opeo.modified}</modifiedDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>decompile</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eolang</groupId>
            <artifactId>opeo-maven-plugin</artifactId>
            <version>@project.version@</version>
            <executions>
              <execution>
                <id>opeo-decompile</id>
                <goals>
                  <goal>decompile</goal>
                </goals>
                <configuration>
                  <sourcesDir>${jeo.disassemble.output}</sourcesDir>
                  <outputDir>${opeo.decompile.output}</outputDir>
                  <modifiedDir>${opeo.modified}</modifiedDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>ineo</id>
      <properties>
        <opeo.compile.input>${project.build.directory}/generated-sources/ineo-staticize-xmir</opeo.compile.input>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eolang</groupId>
            <artifactId>ineo-maven-plugin</artifactId>
            <version>${ineo.version}</version>
            <executions>
              <execution>
                <id>ineo-staticize</id>
                <phase>process-classes</phase>
                <goals>
                  <goal>staticize</goal>
                </goals>
                <configuration>
                  <sourcesDir>${opeo.decompile.output}</sourcesDir>
                  <outputDir>${opeo.compile.input}</outputDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>phi</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eolang</groupId>
            <artifactId>eo-maven-plugin</artifactId>
            <version>0.42.0</version>
            <executions>
              <execution>
                <id>convert-xmir-to-phi</id>
                <phase>process-classes</phase>
                <goals>
                  <goal>xmir-to-phi</goal>
                </goals>
                <configuration>
                  <phiInputDir>${opeo.modified}</phiInputDir>
                  <phiOutputDir>${eo.phi.output}</phiOutputDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>compile-nothing</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eolang</groupId>
            <artifactId>opeo-maven-plugin</artifactId>
            <version>@project.version@</version>
            <configuration>
              <disabled>true</disabled>
            </configuration>
            <executions>
              <execution>
                <id>opeo-compile</id>
                <phase>generate-test-sources</phase>
                <goals>
                  <goal>compile</goal>
                </goals>
                <configuration>
                  <sourcesDir>${opeo.compile.input}</sourcesDir>
                  <outputDir>${opeo.compile.output}</outputDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>compile</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.eolang</groupId>
            <artifactId>opeo-maven-plugin</artifactId>
            <version>@project.version@</version>
            <executions>
              <execution>
                <id>opeo-compile</id>
                <phase>generate-test-sources</phase>
                <goals>
                  <goal>compile</goal>
                </goals>
                <configuration>
                  <sourcesDir>${opeo.compile.input}</sourcesDir>
                  <outputDir>${opeo.compile.output}</outputDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>assemble</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.4.1</version>
            <configuration>
              <executable>mvn</executable>
            </configuration>
            <executions>
              <execution>
                <id>jeo-to-bytecode</id>
                <phase>generate-test-sources</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <arguments combine.children="append">
                    <argument>org.eolang:jeo-maven-plugin:${jeo.version}:assemble</argument>
                    <argument>-Djeo.assemble.sourcesDir=${opeo.compile.output}</argument>
                    <!--
                          @todo #200:90min Enable Bytecode Verification For Spring Fat Integration Test.
                           We skip verification because the Spring Framework uses many classes that
                           are not in the classpath and the plugin cannot verify the correctness of
                           the transformation. For not it's not so crucial, but in the future, we
                           should enable it.
                         -->
                    <argument>-Djeo.assemble.skip.verification=true</argument>
                    <argument>-e</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>run-jar</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>3.4.1</version>
            <executions>
              <execution>
                <id>run-old-app</id>
                <phase>verify</phase>
                <goals>
                  <goal>java</goal>
                </goals>
                <configuration>
                  <mainClass>org.eolang.jeo.spring.FactorialApplication</mainClass>
                  <additionalClasspathElements>
                    <classpathElement>${project.build.directory}/${project.build.finalName}.jar</classpathElement>
                  </additionalClasspathElements>
                  <includeProjectDependencies>false</includeProjectDependencies>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
